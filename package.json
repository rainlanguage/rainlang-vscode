{
  "name": "rainlang-vscode",
  "displayName": "Rain Language",
  "publisher": "rainprotocol",
  "description": "Rain Protocol language (rainlang) implementation for vscode",
  "author": "Rain Protocol",
  "license": "CAL-1.0",
  "version": "1.3.0",
  "private": true,
  "main": "./dist/node/client",
  "browser": "./dist/browser/client",
  "homepage": "http://rainprotocol.xyz/",
  "repository": {
    "type": "git",
    "url": "https://github.com/rainprotocol/rainlang-vscode"
  },
  "bugs": {
    "url": "https://github.com/rainprotocol/rainlang-vscode/issues"
  },
  "icon": "./docs/images/rain-logo-800px.png",
  "galleryBanner": {
    "color": "#e0e0e0",
    "theme": "light"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters"
  ],
  "keywords": [
    "rainprotocol",
    "rain",
    "blockchain",
    "ethereum",
    "evm"
  ],
  "engines": {
    "vscode": "^1.75.0"
  },
  "contributes": {
    "commands": [
      {
        "command": "rainlang.compile",
        "title": "Rainlang Compile"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "resourceLangId == rainlang",
          "command": "rainlang.compile"
        }
      ]
    },
    "languages": [
      {
        "id": "rainlang",
        "aliases": [
          "Rain Language",
          "Rain",
          "rain",
          "rainlang",
          "Rainlang",
          "RainLang"
        ],
        "extensions": [
          ".rain"
        ],
        "configuration": "./rain-language-configuration.json",
        "icon": {
          "light": "./docs/images/rain-logo-icon.svg",
          "dark": "./docs/images/rain-logo-icon.svg"
        }
      }
    ],
    "configurationDefaults": {
      "[rainlang]": {
        "editor.semanticHighlighting.enabled": true,
        "editor.language.colorizedBracketPairs": [
          [
            "<",
            ">"
          ],
          [
            "(",
            ")"
          ],
          [
            "{",
            "}"
          ],
          [
            "[",
            "]"
          ]
        ]
      }
    },
    "configuration": {
      "type": "object",
      "title": "Rain Language",
      "properties": {
        "rainlang.subgraphs": {
          "scope": "resource",
          "description": "Additional subgraph endpoint URLs to include when searching for metas of specified meta hashes in a rainlang document.",
          "type": "array",
          "items": {
            "type": "string",
            "pattern": "^https:|^wss:",
            "minItems": 1
          }
        },
        "rainlang.localMetas": {
          "scope": "resource",
          "description": "key/value pairs of meta hash and meta bytes.",
          "type": "object",
          "minProperties": 1,
          "additionalProperties": false,
          "patternProperties": {
            "^0x[a-fA-F0-9]{64}$": {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]{2,}$"
            }
          },
          "examples": [
            {
              "0xe4c000f3728f30e612b34e401529ce5266061cc1233dc54a6a89524929571d8f": "0x1234567890..."
            }
          ]
        },
        "rainlang.autoCompile": {
          "scope": "window",
          "type": "object",
          "description": "Paths of json mapping files used for auto compiling Dotrain files when an action is triggered, such as save, open, close, This feature is ONLY meant to be used for `workspace` settings.json and with `user`.",
          "additionalProperties": false,
          "minProperties": 1,
          "examples": [
            {
              "onSave": "./bar/baz.json"
            }
          ],
          "properties": {
            "onSave": {
              "type": "string",
              "description": "Path to a json containing mapping data for Dotrain files paths, expression names and output json files paths to trigger auto compilation on SAVE, path MUST be RELATIVE to current workspace ROOT directory starting with `./` in UNIX format(`/` as path seperator), The mapping file must be a json with array of objects with following format: [{ \"dotrain\": \"./foo.rain\", \"json\": \"./bar/baz.json\", \"expressions\": [\"exp-1\", \"exp-2\"] }], for details about the mapping file content please read https://github.com/rainprotocol/rainlang",
              "pattern": "^(\\./)(\\.\\/|\\.\\.\\/|[^]*\\/)*[^]+\\.json$"
            }
          }
        },
        "rainlang.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        }
      }
    },
    "grammars": [
      {
        "language": "rainlang",
        "scopeName": "source.rainlang",
        "path": "./syntaxes/rainlang-syntax.json"
      },
      {
        "path": "./syntaxes/rainlang-injection.json",
        "scopeName": "rainlang-string.injection",
        "injectTo": [
          "source.js",
          "source.js.jsx",
          "source.jsx",
          "source.ts",
          "source.tsx"
        ],
        "embeddedLanguages": {
          "meta.embedded.rainlang": "rainlang"
        }
      }
    ],
    "semanticTokenScopes": [
      {
        "language": "rainlang",
        "scopes": {
          "keyword.declaration": [
            "string.regexp.rainlang"
          ]
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run build-prod",
    "postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
    "build": "rimraf ./dist && npm run build-node-dev && npm run build-browser-dev",
    "build-prod": "rimraf ./dist && npm run build-node-prod && npm run build-browser-prod",
    "build-node-dev": "npm run build-node-server -- --sourcemap && npm run build-node-client -- --sourcemap",
    "build-node-prod": "npm run build-node-server -- --minify && npm run build-node-client -- --minify",
    "build-browser-dev": "webpack --config ./webpack.dev.js",
    "build-browser-prod": "webpack --config ./webpack.prod.js",
    "build-node-client": "esbuild ./client/src/nodeClient.ts --bundle --outfile=./dist/node/client.js --external:vscode --format=cjs --platform=node --target=es2020",
    "build-node-server": "esbuild ./server/src/nodeServer.ts --bundle --outfile=./dist/node/server.js --external:vscode --format=cjs --platform=node --target=es2020",
    "lint": "eslint .",
    "lint-fix": "eslint . --fix",
    "compile-test": "rimraf ./test/out && tsc -b ./test && webpack -c ./test/webpack.config.js",
    "test": "npm run build && npm run compile-test && node ./test/out/desktop/runTest.js && node ./test/out/web/runTest.js",
    "test-web": "npm run build && npm run compile-test && node ./test/out/web/runTest.js",
    "test-desktop": "npm run build && npm run compile-test && node ./test/out/desktop/runTest.js"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.1",
    "@types/node": "^16.11.7",
    "@types/vscode": "^1.75.1",
    "@types/webpack-env": "^1.18.0",
    "@typescript-eslint/eslint-plugin": "^5.54.0",
    "@typescript-eslint/parser": "^5.54.0",
    "@vscode/test-electron": "^2.2.3",
    "@vscode/test-web": "^0.0.41",
    "@vscode/vsce": "^2.18.0",
    "assert": "^2.0.0",
    "buffer": "^6.0.3",
    "esbuild": "^0.17.11",
    "eslint": "^8.35.0",
    "mocha": "^10.2.0",
    "path-browserify": "^1.0.1",
    "process": "^0.11.10",
    "rimraf": "^4.4.1",
    "terser-webpack-plugin": "^5.3.7",
    "ts-loader": "^9.4.2",
    "ts-node": "^10.9.1",
    "typescript": "^4.9.5",
    "webpack": "^5.77.0",
    "webpack-cli": "^5.0.1"
  }
}
