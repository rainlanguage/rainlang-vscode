{
  "name": "rainlang-vscode",
  "displayName": "Rain Language",
  "publisher": "rainprotocol",
  "description": "Rain Protocol language (rainlang) implementation for vscode",
  "author": "Rain Protocol",
  "license": "CAL-1.0",
  "version": "0.1.4",
  "private": true,
  "main": "./dist/node/client",
  "browser": "./dist/browser/client",
  "homepage": "http://rainprotocol.xyz/",
  "repository": {
    "type": "git",
    "url": "https://github.com/rainprotocol/rainlang-vscode"
  },
  "bugs": {
    "url": "https://github.com/rainprotocol/rainlang-vscode/issues"
  },
  "icon": "./docs/images/rain-logo-800px.png",
  "galleryBanner": {
    "color": "#e0e0e0",
    "theme": "light"
  },
  "categories": [
    "Programming Languages",
    "Linters",
    "Formatters"
  ],
  "keywords": [
    "rainprotocol",
    "rain",
    "blockchain",
    "ethereum",
    "evm"
  ],
  "engines": {
    "vscode": "^1.75.0"
  },
  "activationEvents": [
    "onLanguage:javascript",
    "onLanguage:typescript"
  ],
  "contributes": {
    "commands": [
      {
        "command": "rainlang.compile",
        "title": "Rainlang Compile"
      }
    ],
    "menus": {
      "editor/context": [
        {
          "when": "resourceLangId == rainlang",
          "command": "rainlang.compile"
        },
        {
          "when": "resourceLangId == javascript",
          "command": "rainlang.compile"
        },
        {
          "when": "resourceLangId == typescript",
          "command": "rainlang.compile"
        }
      ]
    },
    "languages": [
      {
        "id": "rainlang",
        "aliases": [
          "Rain Language",
          "Rain",
          "rain",
          "rainlang",
          "Rainlang",
          "RainLang"
        ],
        "extensions": [
          ".rain",
          ".rainlang",
          ".rl"
        ],
        "configuration": "./rain-language-configuration.json",
        "icon": {
          "light": "./docs/images/rain-logo-icon.svg",
          "dark": "./docs/images/rain-logo-icon.svg"
        }
      }
    ],
    "configurationDefaults": {
      "[rainlang]": {
        "editor.language.colorizedBracketPairs": [
          [
            "<",
            ">"
          ],
          [
            "(",
            ")"
          ],
          [
            "{",
            "}"
          ],
          [
            "[",
            "]"
          ]
        ]
      }
    },
    "configuration": {
      "type": "object",
      "title": "Rain Language",
      "properties": {
        "rainlang.opmeta": {
          "scope": "resource",
          "description": "Controls the op meta used for parsing Rain documents, either op meta bytes as hex string or a deployer address with network name or subgraph endpoint.",
          "oneOf": [
            {
              "type": "string",
              "pattern": "^0x[a-fA-F0-9]+$"
            },
            {
              "type": "object",
              "required": [
                "deployerAddress",
                "source"
              ],
              "properties": {
                "deployerAddress": {
                  "type": "string",
                  "pattern": "^0x[a-fA-F0-9]{40}$",
                  "description": "The address of the interpreter deplyer to get the op meta from."
                },
                "source": {
                  "oneOf": [
                    {
                      "anyOf": [
                        {
                          "type": "string",
                          "default": "mumbai",
                          "enum": [
                            "polygon",
                            "mumbai"
                          ]
                        },
                        {
                          "type": "integer",
                          "default": 524289,
                          "enum": [
                            524289,
                            137
                          ]
                        }
                      ]
                    },
                    {
                      "type": "string",
                      "default": "https://api.thegraph.com/subgraphs/name/rainprotocol/interpreter-registry",
                      "pattern": "^https://api.thegraph.com/subgraphs/name/",
                      "description": "The subgraph endpoint URL to get the op meta from."
                    }
                  ],
                  "description": "The source to get op meta from, either name or chain id of the evm network or subgraph endpoint URL."
                }
              }
            }
          ]
        },
        "rainlang.trace.server": {
          "scope": "window",
          "type": "string",
          "enum": [
            "off",
            "messages",
            "verbose"
          ],
          "default": "off",
          "description": "Traces the communication between VS Code and the language server."
        }
      }
    },
    "grammars": [
      {
        "language": "rainlang",
        "scopeName": "source.rainlang",
        "path": "./syntaxes/rainlang-syntax.json"
      },
      {
        "path": "./syntaxes/rainlang-injection.json",
        "scopeName": "rainlang-string.injection",
        "injectTo": [
          "source.js",
          "source.js.jsx",
          "source.jsx",
          "source.ts",
          "source.tsx"
        ],
        "embeddedLanguages": {
          "meta.embedded.rainlang": "rainlang"
        }
      }
    ]
  },
  "scripts": {
    "vscode:prepublish": "npm run build-prod",
    "postinstall": "cd client && npm install && cd ../server && npm install && cd ..",
    "build": "rimraf ./dist && npm run build-node-dev && npm run build-browser-dev",
    "build-prod": "rimraf ./dist && npm run build-node-prod && npm run build-browser-prod",
    "build-node-dev": "npm run build-node-server -- --sourcemap && npm run build-node-client -- --sourcemap",
    "build-node-prod": "npm run build-node-server -- --minify && npm run build-node-client -- --minify",
    "build-browser-dev": "webpack --config ./webpack.dev.js",
    "build-browser-prod": "webpack --config ./webpack.prod.js",
    "build-node-client": "esbuild ./client/src/nodeClient.ts --bundle --outfile=./dist/node/client.js --external:vscode --format=cjs --platform=node --target=es2020",
    "build-node-server": "esbuild ./server/src/nodeServer.ts --bundle --outfile=./dist/node/server.js --external:vscode --format=cjs --platform=node --target=es2020",
    "lint": "eslint .",
    "lint-fix": "eslint . --fix",
    "compile-test": "rimraf ./test/out && tsc -b ./test && webpack -c ./test/webpack.config.js",
    "test": "npm run compile-test && node ./test/out/desktop/runTest.js && node ./test/out/web/runTest.js",
    "test-web": "npm run compile-test && node ./test/out/web/runTest.js",
    "test-desktop": "npm run compile-test && node ./test/out/desktop/runTest.js"
  },
  "devDependencies": {
    "@types/mocha": "^10.0.1",
    "@types/node": "^16.11.7",
    "@types/vscode": "^1.75.1",
    "@types/webpack-env": "^1.18.0",
    "@typescript-eslint/eslint-plugin": "^5.54.0",
    "@typescript-eslint/parser": "^5.54.0",
    "@vscode/test-electron": "^2.2.3",
    "@vscode/test-web": "^0.0.41",
    "@vscode/vsce": "^2.18.0",
    "assert": "^2.0.0",
    "buffer": "^6.0.3",
    "esbuild": "^0.17.11",
    "eslint": "^8.35.0",
    "mocha": "^10.2.0",
    "path-browserify": "^1.0.1",
    "process": "^0.11.10",
    "rimraf": "^4.4.1",
    "terser-webpack-plugin": "^5.3.7",
    "ts-loader": "^9.4.2",
    "ts-node": "^10.9.1",
    "typescript": "^4.9.5",
    "webpack": "^5.77.0",
    "webpack-cli": "^5.0.1"
  }
}
